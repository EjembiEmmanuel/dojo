// Mostly generated by Claude Sonnet based on `alloy`'s `anvil` node binding <https://github.com/alloy-rs/alloy/blob/main/crates/node-bindings/src/anvil.rs> to adapt it to `katana`'s CLI arguments.

//! Utilities for launching a Katana instance.

use std::io::{BufRead, BufReader};
use std::net::SocketAddr;
use std::path::PathBuf;
use std::process::{Child, Command};
use std::str::FromStr;
use std::time::{Duration, Instant};

use katana_primitives::FieldElement;
use starknet::core::types::FromStrError;
use starknet::macros::short_string;
use starknet::signers::SigningKey;
use thiserror::Error;
use url::Url;

/// How long we will wait for katana to indicate that it is ready.
const KATANA_STARTUP_TIMEOUT_MILLIS: u64 = 10_000;

/// A katana CLI instance. Will close the instance when dropped.
///
/// Construct this using [`Katana`].
#[derive(Debug)]
pub struct KatanaInstance {
    port: u16,
    child: Child,
    accounts: Vec<Account>,
    chain_id: FieldElement,
}

impl KatanaInstance {
    /// Returns a reference to the child process.
    pub const fn child(&self) -> &Child {
        &self.child
    }

    /// Returns a mutable reference to the child process.
    pub fn child_mut(&mut self) -> &mut Child {
        &mut self.child
    }

    /// Returns the port of this instance
    pub const fn port(&self) -> u16 {
        self.port
    }

    /// Returns the chain of the katana instance
    pub fn chain_id(&self) -> FieldElement {
        self.chain_id
    }

    /// Returns the HTTP endpoint of this instance
    #[doc(alias = "http_endpoint")]
    pub fn endpoint(&self) -> String {
        format!("http://localhost:{}", self.port)
    }

    /// Returns the HTTP endpoint url of this instance
    #[doc(alias = "http_endpoint_url")]
    pub fn endpoint_url(&self) -> Url {
        Url::parse(&self.endpoint()).unwrap()
    }
}

impl Drop for KatanaInstance {
    fn drop(&mut self) {
        self.child.kill().expect("could not kill katana");
    }
}

/// Errors that can occur when working with the [`Katana`].
#[derive(Debug, Error)]
pub enum KatanaError {
    /// Spawning the katana process failed.
    #[error("could not start katana: {0}")]
    SpawnError(std::io::Error),

    /// Timed out waiting for a message from katana's stderr.
    #[error("timed out waiting for katana to spawn; is katana installed?")]
    Timeout,

    /// Unable to parse felt value from katana's stdout.
    #[error("failed to parse felt value from katana's stdout")]
    ParseFelt(#[from] FromStrError),

    /// A line could not be read from the katana stderr.
    #[error("could not read line from katana stderr: {0}")]
    ReadLineError(std::io::Error),

    /// The child katana process's stderr was not captured.
    #[error("could not get stderr for katana child process")]
    NoStderr,
}

#[derive(Debug, Clone)]
pub struct Account {
    pub address: FieldElement,
    pub private_key: Option<SigningKey>,
}

/// Builder for launching `katana`.
///
/// # Panics
///
/// If `spawn` is called without `katana` being available in the user's $PATH
///
/// # Example
///
/// ```no_run
/// use alloy_node_bindings::Katana;
///
/// let port = 5050u16;
/// let url = format!("http://localhost:{}", port).to_string();
///
/// let katana = Katana::new().port(port).spawn();
///
/// drop(katana); // this will kill the instance
/// ```
#[derive(Clone, Debug, Default)]
#[must_use = "This Builder struct does nothing unless it is `spawn`ed"]
pub struct Katana {
    program: Option<PathBuf>,
    port: Option<u16>,
    block_time: Option<u64>,
    db_dir: Option<PathBuf>,
    rpc_url: Option<String>,
    dev: bool,
    json_log: bool,
    fork_block_number: Option<u64>,
    messaging: Option<PathBuf>,
    metrics: Option<String>,
    host: Option<String>,
    max_connections: Option<u64>,
    allowed_origins: Option<String>,
    seed: Option<u64>,
    accounts: Option<u16>,
    disable_fee: bool,
    disable_validate: bool,
    chain_id: Option<FieldElement>,
    validate_max_steps: Option<u64>,
    invoke_max_steps: Option<u64>,
    eth_gas_price: Option<u64>,
    strk_gas_price: Option<u64>,
    genesis: Option<PathBuf>,
    args: Vec<String>,
    timeout: Option<u64>,
    silent: bool,
    no_mining: bool,
}

impl Katana {
    /// Creates an empty Katana builder.
    /// The default port is 5050.
    ///
    /// # Example
    ///
    /// ```
    /// # use alloy_node_bindings::Katana;
    /// fn a() {
    ///  let katana = Katana::default().spawn();
    ///
    ///  println!("Katana running at `{}`", katana.endpoint());
    /// # }
    /// ```
    pub fn new() -> Self {
        Self::default()
    }

    /// Creates a Katana builder which will execute `katana` at the given path.
    ///
    /// # Example
    ///
    /// ```
    /// # use alloy_node_bindings::Katana;
    /// fn a() {
    ///  let katana = Katana::at("~/.katana/bin/katana").spawn();
    ///
    ///  println!("Katana running at `{}`", katana.endpoint());
    /// # }
    /// ```
    pub fn at(path: impl Into<PathBuf>) -> Self {
        Self::new().path(path)
    }

    /// Sets the `path` to the `katana` cli
    ///
    /// By default, it's expected that `katana` is in `$PATH`, see also
    /// [`std::process::Command::new()`]
    pub fn path<T: Into<PathBuf>>(mut self, path: T) -> Self {
        self.program = Some(path.into());
        self
    }

    /// Sets the port which will be used when the `katana` instance is launched.
    pub fn port<T: Into<u16>>(mut self, port: T) -> Self {
        self.port = Some(port.into());
        self
    }

    /// Sets the block-time in milliseconds which will be used when the `katana` instance is
    /// launched.
    pub const fn block_time(mut self, block_time: u64) -> Self {
        self.block_time = Some(block_time);
        self
    }

    /// Sets the database directory path which will be used when the `katana` instance is launched.
    pub fn db_dir<T: Into<PathBuf>>(mut self, db_dir: T) -> Self {
        self.db_dir = Some(db_dir.into());
        self
    }

    /// Sets the RPC URL to fork the network from.
    pub fn rpc_url<T: Into<String>>(mut self, rpc_url: T) -> Self {
        self.rpc_url = Some(rpc_url.into());
        self
    }

    /// Enables the dev mode.
    pub const fn dev(mut self, dev: bool) -> Self {
        self.dev = dev;
        self
    }

    /// Enables JSON logging.
    pub const fn json_log(mut self, json_log: bool) -> Self {
        self.json_log = json_log;
        self
    }

    /// Sets the fork block number which will be used when the `katana` instance is launched.
    pub const fn fork_block_number(mut self, fork_block_number: u64) -> Self {
        self.fork_block_number = Some(fork_block_number);
        self
    }

    /// Sets the messaging configuration path which will be used when the `katana` instance is
    /// launched.
    pub fn messaging<T: Into<PathBuf>>(mut self, messaging: T) -> Self {
        self.messaging = Some(messaging.into());
        self
    }

    /// Enables Prometheus metrics and sets the socket address.
    pub fn metrics<T: Into<String>>(mut self, metrics: T) -> Self {
        self.metrics = Some(metrics.into());
        self
    }

    /// Sets the host IP address the server will listen on.
    pub fn host<T: Into<String>>(mut self, host: T) -> Self {
        self.host = Some(host.into());
        self
    }

    /// Sets the maximum number of concurrent connections allowed.
    pub const fn max_connections(mut self, max_connections: u64) -> Self {
        self.max_connections = Some(max_connections);
        self
    }

    /// Enables the CORS layer and sets the allowed origins, separated by commas.
    pub fn allowed_origins<T: Into<String>>(mut self, allowed_origins: T) -> Self {
        self.allowed_origins = Some(allowed_origins.into());
        self
    }

    /// Sets the seed for randomness of accounts to be predeployed.
    pub const fn seed(mut self, seed: u64) -> Self {
        self.seed = Some(seed);
        self
    }

    /// Sets the number of pre-funded accounts to generate.
    pub fn accounts<T: Into<u16>>(mut self, accounts: T) -> Self {
        self.accounts = Some(accounts.into());
        self
    }

    /// Disables charging fee when executing transactions.
    pub const fn disable_fee(mut self, disable_fee: bool) -> Self {
        self.disable_fee = disable_fee;
        self
    }

    /// Disables validation when executing transactions.
    pub const fn disable_validate(mut self, disable_validate: bool) -> Self {
        self.disable_validate = disable_validate;
        self
    }

    /// Sets the chain ID.
    pub const fn chain_id(mut self, chain_id: FieldElement) -> Self {
        self.chain_id = Some(chain_id);
        self
    }

    /// Sets the maximum number of steps available for the account validation logic.
    pub const fn validate_max_steps(mut self, validate_max_steps: u64) -> Self {
        self.validate_max_steps = Some(validate_max_steps);
        self
    }

    /// Sets the maximum number of steps available for the account execution logic.
    pub const fn invoke_max_steps(mut self, invoke_max_steps: u64) -> Self {
        self.invoke_max_steps = Some(invoke_max_steps);
        self
    }

    /// Sets the L1 ETH gas price (denominated in wei).
    pub const fn eth_gas_price(mut self, eth_gas_price: u64) -> Self {
        self.eth_gas_price = Some(eth_gas_price);
        self
    }

    /// Sets the L1 STRK gas price (denominated in fri).
    pub const fn strk_gas_price(mut self, strk_gas_price: u64) -> Self {
        self.strk_gas_price = Some(strk_gas_price);
        self
    }

    /// Sets the genesis configuration path.
    pub fn genesis<T: Into<PathBuf>>(mut self, genesis: T) -> Self {
        self.genesis = Some(genesis.into());
        self
    }

    /// Adds an argument to pass to the `katana`.
    pub fn arg<T: Into<String>>(mut self, arg: T) -> Self {
        self.args.push(arg.into());
        self
    }

    /// Adds multiple arguments to pass to the `katana`.
    pub fn args<I, S>(mut self, args: I) -> Self
    where
        I: IntoIterator<Item = S>,
        S: Into<String>,
    {
        for arg in args {
            self = self.arg(arg);
        }
        self
    }

    /// Sets the timeout which will be used when the `katana` instance is launched.
    pub const fn timeout(mut self, timeout: u64) -> Self {
        self.timeout = Some(timeout);
        self
    }

    /// Don't print anything on startup.
    pub const fn silent(mut self, silent: bool) -> Self {
        self.silent = silent;
        self
    }

    /// Disable auto and interval mining, and mine on demand instead via an endpoint.
    pub const fn no_mining(mut self, no_mining: bool) -> Self {
        self.no_mining = no_mining;
        self
    }

    /// Consumes the builder and spawns `katana`.
    ///
    /// # Panics
    ///
    /// If spawning the instance fails at any point.
    #[track_caller]
    pub fn spawn(self) -> KatanaInstance {
        self.try_spawn().expect("could not spawn katana")
    }

    /// Consumes the builder and spawns `katana`. If spawning fails, returns an error.
    pub fn try_spawn(self) -> Result<KatanaInstance, KatanaError> {
        let mut cmd = self.program.as_ref().map_or_else(|| Command::new("katana"), Command::new);
        cmd.stdout(std::process::Stdio::piped()).stderr(std::process::Stdio::inherit());
        let mut port = self.port.unwrap_or(5050);

        if self.silent {
            cmd.arg("--silent");
        }

        if self.no_mining {
            cmd.arg("--no-mining");
        }

        if let Some(block_time) = self.block_time {
            cmd.arg("-b").arg(block_time.to_string());
        }

        if let Some(db_dir) = self.db_dir {
            cmd.arg("--db-dir").arg(db_dir);
        }

        if let Some(rpc_url) = self.rpc_url {
            cmd.arg("--rpc-url").arg(rpc_url);
        }

        if self.dev {
            cmd.arg("--dev");
        }

        if self.json_log {
            cmd.arg("--json-log");
        }

        if let Some(fork_block_number) = self.fork_block_number {
            cmd.arg("--fork-block-number").arg(fork_block_number.to_string());
        }

        if let Some(messaging) = self.messaging {
            cmd.arg("--messaging").arg(messaging);
        }

        if let Some(metrics) = self.metrics {
            cmd.arg("--metrics").arg(metrics);
        }

        cmd.arg("-p").arg(port.to_string());

        if let Some(host) = self.host {
            cmd.arg("--host").arg(host);
        }

        if let Some(max_connections) = self.max_connections {
            cmd.arg("--max-connections").arg(max_connections.to_string());
        }

        if let Some(allowed_origins) = self.allowed_origins {
            cmd.arg("--allowed-origins").arg(allowed_origins);
        }

        if let Some(seed) = self.seed {
            cmd.arg("--seed").arg(seed.to_string());
        }

        if let Some(accounts) = self.accounts {
            cmd.arg("--accounts").arg(accounts.to_string());
        }

        if self.disable_fee {
            cmd.arg("--disable-fee");
        }

        if self.disable_validate {
            cmd.arg("--disable-validate");
        }

        if let Some(chain_id) = self.chain_id {
            cmd.arg("--chain-id").arg(chain_id.to_string());
        }

        if let Some(validate_max_steps) = self.validate_max_steps {
            cmd.arg("--validate-max-steps").arg(validate_max_steps.to_string());
        }

        cmd.args(self.args);

        let mut child = cmd.spawn().map_err(KatanaError::SpawnError)?;

        let stdout = child.stdout.as_mut().ok_or(KatanaError::NoStderr)?;

        let start = Instant::now();
        let mut reader = BufReader::new(stdout);

        let mut accounts = Vec::new();
        let chain_id = self.chain_id.unwrap_or(short_string!("KATANA"));

        loop {
            if start + Duration::from_millis(self.timeout.unwrap_or(KATANA_STARTUP_TIMEOUT_MILLIS))
                <= Instant::now()
            {
                return Err(KatanaError::Timeout);
            }

            let mut line = String::new();
            reader.read_line(&mut line).map_err(KatanaError::ReadLineError)?;
            // trace!(target: "anvil", line);
            if let Some(addr) = line.strip_prefix("Listening on") {
                // <Listening on 127.0.0.1:8545>
                // parse the actual port
                if let Ok(addr) = SocketAddr::from_str(addr.trim()) {
                    port = addr.port();
                }
                break;
            }

            if line.starts_with("| Account address |") {
                let address_str = line
                    .split_once('|')
                    .and_then(|(_, s)| s.trim().split_once(' '))
                    .and_then(|(_, s)| Some(s.trim()));

                if let Some(addr) = address_str {
                    let address = FieldElement::from_str(addr)?;

                    let private_key = if line.starts_with("| Private key     |") {
                        let private_key_str = line
                            .split_once('|')
                            .and_then(|(_, s)| s.trim().split_once(' '))
                            .and_then(|(_, s)| Some(s.trim()));

                        if let Some(priv_key) = private_key_str {
                            let private_key = FieldElement::from_str(priv_key)?;
                            let key = SigningKey::from_secret_scalar(private_key);
                            Some(key)
                        } else {
                            None
                        }
                    } else {
                        None
                    };

                    accounts.push(Account { address, private_key });
                }
            }
        }

        Ok(KatanaInstance { port, child, accounts, chain_id })
    }
}
